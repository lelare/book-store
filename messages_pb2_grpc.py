# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import messages_pb2 as messages__pb2


class GameStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.connect = channel.unary_unary(
                '/bookserver.Game/connect',
                request_serializer=messages__pb2.ConnectionRequest.SerializeToString,
                response_deserializer=messages__pb2.PlayerResponse.FromString,
                )
        self.update = channel.stream_stream(
                '/bookserver.Game/update',
                request_serializer=messages__pb2.UpdateRequest.SerializeToString,
                response_deserializer=messages__pb2.UpdateResponse.FromString,
                )
        self.Election = channel.unary_unary(
                '/bookserver.Game/Election',
                request_serializer=messages__pb2.ElectionRequest.SerializeToString,
                response_deserializer=messages__pb2.ElectionResponse.FromString,
                )
        self.TimeSync = channel.unary_unary(
                '/bookserver.Game/TimeSync',
                request_serializer=messages__pb2.TimeSyncRequest.SerializeToString,
                response_deserializer=messages__pb2.TimeSyncResponse.FromString,
                )
        self.ListBoard = channel.unary_unary(
                '/bookserver.Game/ListBoard',
                request_serializer=messages__pb2.Empty.SerializeToString,
                response_deserializer=messages__pb2.BoardState.FromString,
                )
        self.GetPrice = channel.unary_unary(
                '/bookserver.Game/GetPrice',
                request_serializer=messages__pb2.Book.SerializeToString,
                response_deserializer=messages__pb2.Price.FromString,
                )


class GameServicer(object):
    """Missing associated documentation comment in .proto file."""

    def connect(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def update(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Election(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TimeSync(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListBoard(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPrice(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GameServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'connect': grpc.unary_unary_rpc_method_handler(
                    servicer.connect,
                    request_deserializer=messages__pb2.ConnectionRequest.FromString,
                    response_serializer=messages__pb2.PlayerResponse.SerializeToString,
            ),
            'update': grpc.stream_stream_rpc_method_handler(
                    servicer.update,
                    request_deserializer=messages__pb2.UpdateRequest.FromString,
                    response_serializer=messages__pb2.UpdateResponse.SerializeToString,
            ),
            'Election': grpc.unary_unary_rpc_method_handler(
                    servicer.Election,
                    request_deserializer=messages__pb2.ElectionRequest.FromString,
                    response_serializer=messages__pb2.ElectionResponse.SerializeToString,
            ),
            'TimeSync': grpc.unary_unary_rpc_method_handler(
                    servicer.TimeSync,
                    request_deserializer=messages__pb2.TimeSyncRequest.FromString,
                    response_serializer=messages__pb2.TimeSyncResponse.SerializeToString,
            ),
            'ListBoard': grpc.unary_unary_rpc_method_handler(
                    servicer.ListBoard,
                    request_deserializer=messages__pb2.Empty.FromString,
                    response_serializer=messages__pb2.BoardState.SerializeToString,
            ),
            'GetPrice': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPrice,
                    request_deserializer=messages__pb2.Book.FromString,
                    response_serializer=messages__pb2.Price.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'bookserver.Game', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Game(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def connect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bookserver.Game/connect',
            messages__pb2.ConnectionRequest.SerializeToString,
            messages__pb2.PlayerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def update(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/bookserver.Game/update',
            messages__pb2.UpdateRequest.SerializeToString,
            messages__pb2.UpdateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Election(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bookserver.Game/Election',
            messages__pb2.ElectionRequest.SerializeToString,
            messages__pb2.ElectionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TimeSync(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bookserver.Game/TimeSync',
            messages__pb2.TimeSyncRequest.SerializeToString,
            messages__pb2.TimeSyncResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListBoard(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bookserver.Game/ListBoard',
            messages__pb2.Empty.SerializeToString,
            messages__pb2.BoardState.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPrice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bookserver.Game/GetPrice',
            messages__pb2.Book.SerializeToString,
            messages__pb2.Price.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
